[global_tags]
  # user = "$USER"

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false
  debug = true
  logtarget = "file"
  logfile = "/var/log/telegraf/telegraf.log"

[[outputs.influxdb]]
  urls = ["http://127.0.0.1:8428"]
  skip_database_creation = true
  timeout = "10s"
  # user_agent = "telegraf"

[[inputs.procstat]]
   systemd_unit = "telegraf.service"
   interval = "1m"

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = false
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = true

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "efi"]

[[inputs.diskio]]
  devices = ["sda", "nvm*"]
[[inputs.net]]
  interfaces = ["ens*"]

[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  source_tag = false
  container_name_include = []
  container_name_exclude = []
  timeout = "10s"
  perdevice = false
  container_state_include = ["running", "exited", "dead"]
  docker_label_include = []

[[inputs.http_response]]
  urls = ["https://www.google.com"]
  response_status_code = 200
